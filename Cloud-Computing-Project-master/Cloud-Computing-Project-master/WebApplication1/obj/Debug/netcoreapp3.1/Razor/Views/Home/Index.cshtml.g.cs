#pragma checksum "D:\TRUONG_VO\Cloud-Computing-Project-master\WebApplication1\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "3402cb6138ffeb1d896e81d0abb3636bcd0342a2"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\TRUONG_VO\Cloud-Computing-Project-master\WebApplication1\Views\_ViewImports.cshtml"
using WebApplication1;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\TRUONG_VO\Cloud-Computing-Project-master\WebApplication1\Views\_ViewImports.cshtml"
using WebApplication1.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3402cb6138ffeb1d896e81d0abb3636bcd0342a2", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"637209e7eeedf13d00f2cccd93a350b795d01eb6", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\TRUONG_VO\Cloud-Computing-Project-master\WebApplication1\Views\Home\Index.cshtml"
   ViewData["Title"] = "Home Page"; 

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<style>

    * {
        margin: 0px;
        padding: 0px;
        box-sizing: border-box;
    }

    body, html {
        height: 100%;
        font-family: sans-serif;
        text-align: center;
    }

    a {
        margin: 0px;
        transition: all 0.4s;
        -webkit-transition: all 0.4s;
        -o-transition: all 0.4s;
        -moz-transition: all 0.4s;
    }

        a:focus {
            outline: none !important;
        }

        a:hover {
            text-decoration: none;
        }


    h1, h2, h3, h4, h5, h6 {
        margin: 0px;
    }

    p {
        margin: 0px;
    }

    ul, li {
        margin: 0px;
        list-style-type: none;
    }

    input {
        display: block;
        outline: none;
        border: none !important;
    }

    textarea {
        display: block;
        outline: none;
    }

        textarea:focus, input:focus {
            border-color: transparent !important;
        }

    button {
        outline: none !important;
        border: none;
        backg");
            WriteLiteral(@"round: transparent;
    }

        button:hover {
            cursor: pointer;
        }

    iframe {
        border: none !important;
    }



    .limiter {
        width: 100%;
        margin: 0 auto;
    }

    .footer {
        display: none;
    }

    .container-table100 {
        width: 100%;
        background: #d1d1d1;
        display: -webkit-box;
        display: -webkit-flex;
        display: -moz-box;
        display: -ms-flexbox;
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
    }

    .wrap-table100 {
        width: 1300px;
    }

    table {
        width: 100%;
        background-color: #fff;
    }

    th, td {
        font-weight: unset;
        padding-right: 10px;
    }

    .column100 {
        width: 130px;
        padding-left: 25px;
    }

        .column100.column1 {
            width: 265px;
            padding-left: 42px;
        }

    .row100.head th {
        padding-top: 24px;
        padding-bottom: 20px;
    }

    .row100 td {
        pad");
            WriteLiteral(@"ding-top: 18px;
        padding-bottom: 14px;
    }



    .table100.ver6 {
        border-radius: 16px;
        overflow: hidden;
        background: #7918f2;
        background: -webkit-linear-gradient(-68deg, #ac32e4, #4801ff);
        background: -o-linear-gradient(-68deg, #ac32e4, #4801ff);
        background: -moz-linear-gradient(-68deg, #ac32e4, #4801ff);
        background: linear-gradient(-68deg, #ac32e4, #4801ff);
    }

        .table100.ver6 table {
            background-color: transparent;
        }

        .table100.ver6 td {
            font-family: Montserrat-Regular;
            font-size: 14px;
            color: #fff;
            line-height: 1.4;
        }

        .table100.ver6 th {
            font-family: Montserrat-Medium;
            font-size: 12px;
            color: #fff;
            line-height: 1.4;
            text-transform: uppercase;
            background-color: rgba(255,255,255,0.32);
        }

        .table100.ver6 .row100:hover td {
            background-color: rgba");
            WriteLiteral(@"(255,255,255,0.1);
        }

        .table100.ver6 .hov-column-ver6 {
            background-color: rgba(255,255,255,0.1);
        }


        .table100.ver6 .row100 td:hover {
            background-color: rgba(255,255,255,0.2);
        }

    .user_input {
        padding: 8px;
        display: block;
        border: none;
        border: 1px solid #ccc !important;
        width: 100%;
    }
</style>
<div class=""text-center"">
    <h1 class=""display-4"">Chương trình quản lý sinh viên</h1>
</div>

<input id=""id"" class=""user_input"" />
<input id=""first"" class=""user_input"" />
<input id=""last"" class=""user_input"" />
<input id=""email"" class=""user_input"" />
<input id=""math"" class=""user_input"" />
<input id=""physics"" class=""user_input"" />
<input id=""chemistry"" class=""user_input"" />

<button onclick=""modify('add')"">Thêm</button>
<button onclick=""modify('delete')"">Xóa</button>
<button onclick=""modify('modify')"">Sửa</button>

<div class=""container-table100"">
    <div class=""table100 ver6 m-b-110"">
        <table data-ve");
            WriteLiteral(@"rtable=""ver6"">
            <thead>
                <tr class=""row100 head"">
                    <th class=""column100 column1"" data-column=""column1"">Student ID</th>
                    <th class=""column100 column2"" data-column=""column2"">First Name</th>
                    <th class=""column100 column3"" data-column=""column3"">Last Name</th>
                    <th class=""column100 column4"" data-column=""column4"">Email</th>
                    <th class=""column100 column5"" data-column=""column5"">Math</th>
                    <th class=""column100 column6"" data-column=""column6"">Physic</th>
                    <th class=""column100 column7"" data-column=""column7"">Chemistry</th>
                </tr>
            </thead>
            <tbody id=""container""></tbody>
        </table>
    </div>
</div>

<script>
    const url = ""http://localhost:8089/docker-api/students"";

    let students = [];

    //let students = [
    //    {
    //        ""id"": 2,
    //        ""firstName"": ""Võ"",
    //        ""lastName"": ""Trường"",
    /");
            WriteLiteral(@"/        ""email"": ""dp1998@gmail.com"",
    //        ""math"": 1.2,
    //        ""physic"": 2.3,
    //        ""chemistry"": 3.4
    //    },
    //    {
    //        ""id"": 2,
    //        ""firstName"": ""Võ"",
    //        ""lastName"": ""Trường"",
    //        ""email"": ""dp1998@gmail.com"",
    //        ""math"": 1.2,
    //        ""physic"": 2.3,
    //        ""chemistry"": 3.4
    //    },
    //    {
    //        ""id"": 2,
    //        ""firstName"": ""Võ"",
    //        ""lastName"": ""Trường"",
    //        ""email"": ""dp1998@gmail.com"",
    //        ""math"": 1.2,
    //        ""physic"": 2.3,
    //        ""chemistry"": 3.4
    //    }
    //];

    // làm mới lại bảng
    function _updateTable() {
        let container = document.getElementById(""container"");
        container.innerHTML = '';
        for (let student of students) {
            container.innerHTML += `
                <tr class=""row100"">
                    <td class=""column100 column1"" data-column=""column1"">` + student.id + `</td>
                    <td ");
            WriteLiteral(@"class=""column100 column2"" data-column=""column2"">` + student.firstName + `</td>
                    <td class=""column100 column3"" data-column=""column3"">` + student.lastName + `</td>
                    <td class=""column100 column4"" data-column=""column4"">` + student.email + `</td>
                    <td class=""column100 column5"" data-column=""column5"">` + student.math + `</td>
                    <td class=""column100 column6"" data-column=""column6"">` + student.physic + `</td>
                    <td class=""column100 column7"" data-column=""column7"">` + student.chemistry + `</td>
                </tr>
            `;
        }
    }

    // get all student từ database
    function _fetchStudents() {
        fetch(url)
            .then((resp) => resp.json())
            .then(data => {
                students = data;
                console.log(data);
                _updateTable;
            })
            .catch(function (error) {
                console.log(error);
            });
    }

    function _addStudent");
            WriteLiteral(@"(student) {
        fetch(url, {
            method: 'POST',
            body: JSON.stringify(student),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then(res => res.json())
            .then(data => console.log(data))
            .then(_fetchStudents);
    }

    //var student;
    //function _getStudent(id) {
    //    fetch(`${url}/student/${id}`)
    //        .then((resp) => resp.json())
    //        .then(function (data) {
    //            student = data.results;
    //            // _updateTable;
    //        })
    //        .catch(function (error) {
    //            console.log(error);
    //        });
    //}

    function _editStudent(student) {
        fetch(url, {
            method: ""PUT"",
            body: JSON.stringify(student),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then(res => res.json())
            .then(data => console.log(data))
            .then(_fetchStudents);
   ");
            WriteLiteral(@" }

    function _deleteStudent(id) {
        fetch(`${url}/${id}`, {
            method: ""DELETE"",
        }).then(_fetchStudents);
    }

    // các thao tác
    function modify(action) {
        let id = document.getElementById(""id"").value;
        let first = document.getElementById(""first"").value;
        let last = document.getElementById(""last"").value;
        let email = document.getElementById(""email"").value;
        let math = document.getElementById(""math"").value;
        let physics = document.getElementById(""physics"").value;
        let chemistry = document.getElementById(""chemistry"").value;

        console.log(`
            {
                ""action"": ` + action + `,
                ""id"": ` + id + `,
                ""firstName"": ` + first + `,
                ""lastName"": ` + last + `,
                ""email"": ` + email + `,
                ""math"": ` + math + `,
                ""physic"": ` + physics + `,
                ""chemistry"": ` + chemistry + `
            }
        `);

        let aStude");
            WriteLiteral(@"nt = {
            id: id,
            firstName: first,
            lastName: last,
            email: email,
            math: math,
            physics: physics,
            chemistry: chemistry,
        };

        if (action === ""add"") {
            _addStudent(aStudent);
        }

        if (action === ""modify"") {
            _editStudent(aStudent);
        }

        if (action === ""delete"") {
            _deleteStudent(id);
        }
    }

    //_updateTable();
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
